#!/bin/bash
#
# gchroot - Gadgetron chroot command line tool
#
# Multi-purpose script for mounting and executing
# commands in chroot images. Mount points for images
# are created and managed at /mnt/gadgetron_chroot
#
# Michael S. Hansen (michael.schacht.hansen@gmail)
# 

#Script must be run as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

#Constant values
ME=$(basename "$0")
MNTFOLDER=/mnt/gadgetron_chroot
CHROOTPREFIX="chroot_"
MOUNTPOINT=""

create_mnt_folder ()
{
    mkdir -p $MNTFOLDER
}

gen_mount_path()
{
    timestamp=$(date -u +%Y%m%d_%H%M%S)
    rnd=$RANDOM
    echo "${MNTFOLDER}/${CHROOTPREFIX}${rnd}_${timestamp}"
}

cmd_attach ()
{
    if [ "$#" -ne 1 ]; then
	echo "Invalid number of arguments supplied to create command"
	return 1
    fi
    
    local imgpath=$1
    local mntpnt=$(gen_mount_path)
    if [ -d "$imgpath" ]; then
	rp=$(realpath $imgpath)
	ln -s $rp $mntpnt
    elif [ -f "$imgpath" ]; then
	mkdir -p $mntpnt
	mount -o loop $imgpath $mntpnt
    else
	return 1
    fi

    #Set global mount point variable
    MOUNTPOINT=$mntpnt

    mkdir -p ${MOUNTPOINT}/proc
    mkdir -p ${MOUNTPOINT}/sys
    mkdir -p ${MOUNTPOINT}/dev
    mount --bind /proc ${MOUNTPOINT}/proc 
    mount --bind /sys  ${MOUNTPOINT}/sys
    mount --bind /dev  ${MOUNTPOINT}/dev

    return 0
}

cmd_detach ()
{
    local mntpnt=$1

    #Give this full path name if only folder name
    if [ -e "${MNTFOLDER}/${mntpnt}" ]; then
	mntpnt=${MNTFOLDER}/$mntpnt
    fi
    
    if [ ! -e "$mntpnt" ]; then
	echo "Unable to remove non-existent mount point"
	return 1
    fi

    #Set global mount point variable
    MOUNTPOINT=$mntpnt

    umount ${MOUNTPOINT}/proc || /bin/true 
    umount ${MOUNTPOINT}/sys  || /bin/true
    umount ${MOUNTPOINT}/dev  || /bin/true
    
    if [[ -L "$MOUNTPOINT" && -d "$MOUNTPOINT" ]]; then
	rm $MOUNTPOINT
	return 0
    fi

    if [ -d "$MOUNTPOINT" ]; then
	umount $MOUNTPOINT
	rmdir $MOUNTPOINT
	return 0
    fi

    return 0
}

cmd_list()
{
    for m in ${MNTFOLDER}/${CHROOTPREXIF}*; do
	if [ -d "$m" ]; then
	    echo $m
	fi
    done
}

list_commands ()
{
    printf "* list                          : List mounted chroot images\n"
    printf "* exec <mount point> <command>  : Execute command in chroot\n"
    printf "* attach <img OR path>          : Prepare chroot (with mounts)\n"
    printf "* detach <mount point>          : Remove chroot mount point\n"
}

print_usage ()
{
    printf "Usage: "
    printf "\t%s <COMMAND> <ARGS>\n" "$ME"
    printf "\n"
    printf "Available commands:\n\n"
    list_commands
}

#We must have at least one command
if [ "$#" -lt 1 ]; then
    print_usage
    exit 1
fi

COMMAND=$1; shift

#Make sure we have the mount folder
create_mnt_folder

case $COMMAND in
    "attach" )
	if cmd_attach "$@"; then
	    echo "$MOUNTPOINT"
	else
	    echo "attach command failed with error code: $?"
	    exit 1
	fi
	;;
    "detach" )
	if cmd_detach "$@"; then
	    echo "$MOUNTPOINT"
	else
	    echo "detach command failed with error code: $?"
	    exit 1
	fi
	;;
    "list" )
	cmd_list
	;;
    * )
	echo "Invalid command \"$COMMAND\""
	print_usage
esac
